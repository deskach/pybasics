check "Python developers toolkit" pluralsight course

###########
##CHAPTER 2

//linux
pip install virtualenvwrapper
export environment variable to set up virtualenv location
mkproject HelloWorld


// Windows
pip install virtualenv
pip install virtualenvwrapper-win 
mkvirtualenv HelloWorld
mkdir HelloWorld
cd HelloWorld
setprojectdir .
workon HelloWorld #run this to activate HelloWorld environment
pip install Flask


In console:
from helloworld import app
app.url_map
##^ will list all url mappings

###########
##CHAPTER 3

{% extends "base.html" %} 
^Extends a base template, this must be the firest tag

{% block content %}...{% endblock %}
^Defines a block that could be overriden by a child

@app.errorhandler(404)
def page_not_found(e):
    return (render_template('404.html'), 404)
^Allows for user-friendly error handling

app.run(debug=True)
^Enables debugging

#Resources
http://jinja.pocoo.org/
http://www.initializr.com
http://flask.pocoo.org/docs/quickstart/#url-building
https://pypi.python.org/pypi/Flask-Bootstrap


##########
##CHAPTER 4
Some attributes of the request objec: 
form, args, cookies, headers, files, method
There is also a session global flusk object.
to use it one needs to configure Flask.secret_key

Flask supports messages by means of flush()/get_flashed_messages()
functions. A secret key can be generated using this command:
    import os
    os.urandom(24)

{% if expression %} ... {% else %} .. {% endif %}
{% elif %}
{% for var in expression %} {% endfor %}
{% with var = expression %} .. {% endwith %} 
//^ this declares a variable which exists withing the scope of block

{{ form.idden_tag() }} - needed for security in every form
{{ form.url(class = "fancy" }} - this is how we can add classes to wtf forms

https://flask-wtf.readthedocs.org
http://wtforms.readthedocs.org


###########
## CHAPTER 5 - Persistance
SqlAlchemy

pip install flask-sqlalchemy
from flask_sqlalchemy import SQLAlchemy
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'thermos.db')
db = SQLAlchemy(app)    # this is imported in models.py 

To create sql-lite database using models one need to run the following in python command-line
from thermos.thermos import db
from thermos.models import User,Bookmark
db.create_all()

To insert data run the following
u = User('name', 'email')
db.session.add(u)
db.session.commit()

To query db run:
User.query.get(1) #here 1 is the id of the user to be queried
User.query.filter_by(username='reindert').all()

class Bookmark(db.Model):
    ...
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
class User(db.Model):
	...
    bookmarks = db.relationship('Bookmark', backref='user', lazy='dynamic')
^The above ForeignKey and backref declarations tell SQLAlchemy to create one-to-many relationships
between User and Bookmark objects. Now each Bookmark has a user object and each User has a list of bookmarks

http://flask-sqlalchemy.pocoo.org/2.1/


